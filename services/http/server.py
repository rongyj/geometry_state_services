#!/usr/bin/env python3.7


import sys,json, socket
from http.server import BaseHTTPRequestHandler, HTTPServer

import services.model.states


class StatesHTTPRequestHandler(BaseHTTPRequestHandler):
    states=None
    GET_STATES_PATH = "/states"

    def _set_headers(self, response_code=200, content_type='application/json'):
        '''
        set  headers
        :param response_code: http response code, default to 200
        :param content_type: http response content type. default to applicaiton/json
        :return: None
        '''
        self.send_response(response_code)
        self.send_header('Content-type', content_type)
        self.end_headers()


    def do_GET(self):
        '''
        GET:  "/states"
        @return: {'Washington': [[-122.402015, 48.225216], [-117.032049, 48.999931], [-116.919132, 45.995175], [-124.079107, 46.267259], [-124.717175, 48.377557], [-122.92315, 47.047963], [-122.402015, 48.225216]], 'Montana': [[-111.475425, 44.702162], [-114.560924, 45.54874], [-116.063531, 48.99995], [-104.062991, 49.000026], [-104.043072, 44.997805], [-111.475425, 44.702162]], 'Maine': [[-69.777276, 44.074148], [-70.818668, 43.121871], [-71.087509, 45.301469], [-68.230807, 47.352148], [-66.969271, 44.828655], [-69.777276, 44.074148]], 'North Dakota': [[-98.730437, 45.938271], [-104.048906, 45.942993], [-104.062991, 49.000026], [-97.229436, 48.999987], [-96.566921, 45.93411], [-98.730437, 45.938271]], 'South Dakota': [[-102.788384, 42.995303], [-104.056199, 43.003062], [-104.048906, 45.942993], [-96.566921, 45.93411], [-96.439394, 42.48924], [-102.788384, 42.995303]], 'Wyoming': [[-104.053615, 41.698218], [-111.051022, 40.996583], [-111.053428, 44.995695], [-104.059842, 44.997336], [-104.053615, 41.698218]], 'Wisconsin': [[-87.748555, 44.961616], [-87.797382, 42.489152], [-90.638456, 42.509363], [-92.885397, 45.644955], [-90.86173, 46.952479], [-87.748555, 44.961616]], 'Idaho': [[-117.026295, 43.679031], [-116.063531, 48.99995], [-114.560924, 45.54874], [-111.05156, 44.473323], [-111.048697, 41.996203], [-117.018864, 41.994794], [-117.026295, 43.679031]], 'Vermont': [[-73.25806, 42.746058], [-73.344723, 45.006138], [-71.505372, 45.013351], [-73.25806, 42.746058]], 'Minnesota': [[-91.730366, 43.499571], [-96.460454, 43.499718], [-97.229436, 48.999987], [-89.530673, 48.001656], [-92.860019, 45.710562], [-91.730366, 43.499571]], 'Oregon': [[-121.441509, 41.994334], [-124.352246, 42.098677], [-123.97734, 46.202706], [-116.528275, 45.710728], [-117.018864, 41.994794], [-121.441509, 41.994334]], 'New Hampshire': [[-72.279917, 42.720467], [-71.087509, 45.301469], [-70.81388, 42.867065], [-72.279917, 42.720467]], 'Iowa': [[-91.120132, 40.705443], [-95.767479, 40.589048], [-96.598315, 43.499849], [-91.223566, 43.500808], [-90.142796, 41.983989], [-91.120132, 40.705443]], 'Massachusetts': [[-71.319328, 41.772195], [-73.49884, 42.07746], [-70.898111, 42.886877], [-69.91778, 41.767653], [-71.319328, 41.772195]], 'Nebraska': [[-101.407393, 40.001003], [-104.051705, 41.003211], [-104.056199, 43.003062], [-96.81014, 42.704084], [-95.308697, 39.999407], [-101.407393, 40.001003]], 'New York': [[-79.763235, 42.267327], [-73.344723, 45.006138], [-74.006183, 40.704002], [-79.763235, 42.267327]], 'Pennsylvania': [[-77.475793, 39.719623], [-80.524269, 39.721209], [-80.520592, 41.986872], [-74.705273, 41.375059], [-75.142901, 39.881602], [-77.475793, 39.719623]], 'Indiana': [[-86.341606, 38.177288], [-88.086062, 37.817657], [-87.529906, 41.723626], [-84.788478, 41.760959], [-84.81878, 38.79341], [-86.341606, 38.177288]], 'Nevada': [[-119.15245, 38.411801], [-119.993459, 41.989205], [-114.039072, 41.995391], [-114.621068, 34.998914], [-119.15245, 38.411801]], 'Utah': [[-114.047273, 38.137652], [-114.039072, 41.995391], [-109.048314, 40.998433], [-109.04848, 36.996641], [-114.043939, 36.996538], [-114.047273, 38.137652]], 'California': [[-121.66522, 38.169285], [-123.721901, 38.924771], [-124.206444, 41.997648], [-119.993459, 41.989205], [-119.995254, 38.994106], [-114.621068, 34.998914], [-114.461436, 32.845422], [-117.128098, 32.535781], [-120.641293, 34.572337], [-121.66522, 38.169285]], 'Ohio': [[-83.272755, 38.609257], [-84.81148, 39.102585], [-84.790377, 41.697494], [-80.520592, 41.986872], [-80.88111, 39.624081], [-83.272755, 38.609257]], 'Illinois': [[-88.071591, 37.511038], [-89.383028, 37.049263], [-91.44934, 39.863094], [-90.638456, 42.509363], [-87.797382, 42.489152], [-88.071591, 37.511038]], 'West Virginia': [[-79.231663, 38.480496], [-81.556654, 37.206352], [-82.646128, 38.14633], [-80.521999, 40.637203], [-77.771551, 39.498115], [-79.231663, 38.480496]], 'Maryland': [[-75.710712, 38.649665], [-79.480971, 39.720274], [-75.791094, 39.723866], [-75.710712, 38.649665]], 'Colorado': [[-102.044456, 37.641474], [-109.04848, 36.996641], [-109.048314, 40.998433], [-102.047739, 40.998071], [-102.044456, 37.641474]], 'Kentucky': [[-86.510668, 36.655074], [-89.41821, 36.510625], [-84.742875, 39.142063], [-81.959575, 37.531172], [-86.510668, 36.655074]], 'Kansas': [[-95.071931, 37.001478], [-102.037207, 36.988994], [-102.051535, 39.998918], [-94.938243, 39.896081], [-95.071931, 37.001478]], 'Virginia': [[-79.144063, 36.546198], [-83.675177, 36.598704], [-78.347546, 39.456998], [-75.877811, 36.556028], [-79.144063, 36.546198]], 'Missouri': [[-89.105034, 36.953922], [-94.617257, 36.489414], [-95.767479, 40.589048], [-91.741711, 40.609784], [-89.105034, 36.953922]], 'Arizona': [[-114.520627, 33.027707], [-114.043939, 36.996538], [-109.04848, 36.996641], [-109.045615, 31.343453], [-114.520627, 33.027707]], 'Oklahoma': [[-94.439322, 34.929151], [-94.500816, 33.623162], [-97.870062, 33.855214], [-99.996475, 34.562384], [-100.00155, 36.492554], [-102.997709, 36.998523], [-94.620379, 36.997046], [-94.439322, 34.929151]], 'North Carolina': [[-83.988454, 34.989151], [-81.669835, 36.589767], [-75.728989, 35.665346], [-78.034518, 33.914465], [-83.988454, 34.989151]], 'Tennessee': [[-83.954608, 35.455544], [-90.305448, 35.000788], [-89.533272, 36.49817], [-81.652272, 36.607673], [-83.954608, 35.455544]], 'Texas': [[-105.998886, 31.39394], [-103.058413, 32.002022], [-103.027286, 36.491591], [-100.007273, 36.493912], [-99.685277, 34.37752], [-94.036116, 33.556034], [-93.507389, 31.039099], [-97.521969, 27.863927], [-97.434607, 25.845557], [-101.401663, 29.770111], [-103.2808, 28.986582], [-105.998886, 31.39394]], 'New Mexico': [[-109.049495, 32.442044], [-109.04848, 36.996641], [-102.997709, 36.998523], [-103.058413, 32.002022], [-109.045615, 31.343453], [-109.049495, 32.442044]], 'Alabama': [[-85.070067, 31.980703], [-88.401415, 30.393551], [-88.194962, 35.013544], [-85.60896, 34.990164], [-85.070067, 31.980703]], 'Mississippi': [[-88.450803, 31.435617], [-88.464237, 30.326076], [-91.632297, 31.001365], [-90.305448, 35.000788], [-88.090468, 34.895629], [-88.450803, 31.435617]], 'Georgia': [[-85.130165, 31.778853], [-85.60896, 34.990164], [-83.106157, 35.000366], [-80.894753, 32.005994], [-82.052767, 30.363794], [-85.130165, 31.778853]], 'South Carolina': [[-81.759593, 33.195381], [-83.106157, 35.000366], [-78.579453, 33.882164], [-80.892914, 32.068173], [-81.759593, 33.195381]], 'Arkansas': [[-94.461691, 34.196765], [-94.617257, 36.489414], [-89.645479, 35.913873], [-91.162241, 33.013162], [-94.461691, 34.196765]], 'Louisiana': [[-93.707524, 30.239578], [-94.038931, 33.023422], [-91.162241, 33.013162], [-91.632297, 31.001365], [-89.723623, 31.001524], [-89.021803, 29.147118], [-93.707524, 30.239578]], 'Florida': [[-80.785662, 28.785194], [-81.119016, 25.134188], [-82.802157, 29.155132], [-87.59858, 31.00263], [-81.528595, 30.721452], [-80.785662, 28.785194]]}
        '''

        try:
            if(self.path==self.GET_STATES_PATH):
                json_response = self.get_states_response()
            else:
                json_response=json.dumps({})

            self._set_headers(200, 'application/json')
            self.wfile.write(json_response)


        except (KeyError, ValueError)  as kvErr:
            self._set_headers(500, 'text/html')
            self.wfile.write("Key or Value Error: Please validate the query string")
            print("Error message:", kvErr)


        except TypeError as typeErr:
            self._set_headers(500, 'text/html')
            self.wfile.write("Type Error happened in the server side.")
            print("Type error:", typeErr)

        except:
            self._set_headers(500, 'text/html')
            self.wfile.write("Unexpected Error happened in the server side")
            print("Unexpected error:", sys.exc_info()[0])
            raise

        

    def get_states_response(self):
        '''
        load the states from file
        :return: json object for states
        '''
        #Load the States from the json data file if it is not loaded
        if StatesHTTPRequestHandler.states is None:
            StatesHTTPRequestHandler.states=services.model.states.States().to_json().encode()
        return StatesHTTPRequestHandler.states



def run(server_class=HTTPServer, handler_class=StatesHTTPRequestHandler, port=9595):
    '''
    Starts the HTTPServer with StatesHTTPRequestHandler at the given port (default: 8080)
    '''
    server_address = ("0.0.0.0", port)
    http_server = server_class(server_address, handler_class)

    print('Starting State HTTP server...')
    http_server.serve_forever()

if __name__ == '__main__':
    '''
    Run this python script
    '''
    if len(sys.argv) > 1 and type(sys.argv[1]) == type(int):
        run(port=int(sys.argv[1]))
    else:
        run()
